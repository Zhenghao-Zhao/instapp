// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: follower.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createFollower = `-- name: CreateFollower :exec
INSERT INTO followers (follower_id, followee_id)
    VALUES ($1, $2)
`

type CreateFollowerParams struct {
	FollowerID int64 `json:"follower_id"`
	FolloweeID int64 `json:"followee_id"`
}

func (q *Queries) CreateFollower(ctx context.Context, arg CreateFollowerParams) error {
	_, err := q.db.Exec(ctx, createFollower, arg.FollowerID, arg.FolloweeID)
	return err
}

const dropFollow = `-- name: DropFollow :exec
DELETE FROM followers
WHERE follower_id = $1
    AND followee_id = $2
`

type DropFollowParams struct {
	FollowerID int64 `json:"follower_id"`
	FolloweeID int64 `json:"followee_id"`
}

func (q *Queries) DropFollow(ctx context.Context, arg DropFollowParams) error {
	_, err := q.db.Exec(ctx, dropFollow, arg.FollowerID, arg.FolloweeID)
	return err
}

const getFolloweeIds = `-- name: GetFolloweeIds :many
SELECT
    followee_id
FROM
    followers
WHERE
    followee_id = ANY ($1::bigint[])
    AND follower_id = $2
`

type GetFolloweeIdsParams struct {
	FolloweeIds []int64 `json:"followee_ids"`
	MyUserID    int64   `json:"my_user_id"`
}

func (q *Queries) GetFolloweeIds(ctx context.Context, arg GetFolloweeIdsParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, getFolloweeIds, arg.FolloweeIds, arg.MyUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var followee_id int64
		if err := rows.Scan(&followee_id); err != nil {
			return nil, err
		}
		items = append(items, followee_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchPaginatedFollowees = `-- name: SearchPaginatedFollowees :many
SELECT
    u.user_id,
    u.username,
    u.name,
    u.profile_image,
    f.id AS follow_id
FROM
    user_profile_search u
    INNER JOIN followers f ON u.user_id = f.followee_id
        AND f.follower_id = $1
WHERE
    CASE WHEN $2 = '' THEN
        TRUE
    ELSE
        search_param @@ to_tsquery($2 || ':*')
    END
    AND ($3::bigint = 0
        OR f.id < $3::bigint)
ORDER BY
    f.id DESC
LIMIT $4
`

type SearchPaginatedFolloweesParams struct {
	FollowerID   int64       `json:"follower_id"`
	SearchQuery  interface{} `json:"search_query"`
	LastFollowID int64       `json:"last_follow_id"`
	Limit        int32       `json:"limit"`
}

type SearchPaginatedFolloweesRow struct {
	UserID       int64     `json:"user_id"`
	Username     string    `json:"username"`
	Name         *string   `json:"name"`
	ProfileImage uuid.UUID `json:"profile_image"`
	FollowID     int64     `json:"follow_id"`
}

func (q *Queries) SearchPaginatedFollowees(ctx context.Context, arg SearchPaginatedFolloweesParams) ([]*SearchPaginatedFolloweesRow, error) {
	rows, err := q.db.Query(ctx, searchPaginatedFollowees,
		arg.FollowerID,
		arg.SearchQuery,
		arg.LastFollowID,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*SearchPaginatedFolloweesRow
	for rows.Next() {
		var i SearchPaginatedFolloweesRow
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Name,
			&i.ProfileImage,
			&i.FollowID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchPaginatedFollowers = `-- name: SearchPaginatedFollowers :many
SELECT
    u.user_id,
    u.username,
    u.name,
    u.profile_image,
    f.id AS follow_id
FROM
    user_profile_search u
    INNER JOIN followers f ON u.user_id = f.follower_id
        AND f.followee_id = $1
WHERE
    CASE WHEN $2 = '' THEN
        TRUE
    ELSE
        search_param @@ to_tsquery($2 || ':*')
    END
    AND ($3::bigint = 0
        OR f.id < $3::bigint)
ORDER BY
    f.id DESC
LIMIT $4
`

type SearchPaginatedFollowersParams struct {
	FolloweeID   int64       `json:"followee_id"`
	SearchQuery  interface{} `json:"search_query"`
	LastFollowID int64       `json:"last_follow_id"`
	Limit        int32       `json:"limit"`
}

type SearchPaginatedFollowersRow struct {
	UserID       int64     `json:"user_id"`
	Username     string    `json:"username"`
	Name         *string   `json:"name"`
	ProfileImage uuid.UUID `json:"profile_image"`
	FollowID     int64     `json:"follow_id"`
}

func (q *Queries) SearchPaginatedFollowers(ctx context.Context, arg SearchPaginatedFollowersParams) ([]*SearchPaginatedFollowersRow, error) {
	rows, err := q.db.Query(ctx, searchPaginatedFollowers,
		arg.FolloweeID,
		arg.SearchQuery,
		arg.LastFollowID,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*SearchPaginatedFollowersRow
	for rows.Next() {
		var i SearchPaginatedFollowersRow
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Name,
			&i.ProfileImage,
			&i.FollowID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
