// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: post_image.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

type CreateImagesParams struct {
	Uid    uuid.UUID `json:"uid"`
	PostID int64     `json:"post_id"`
}

const getImagesByPostIds = `-- name: GetImagesByPostIds :many
SELECT
    i.uid AS image_uid,
    i.post_id AS post_id
FROM
    post_images i
WHERE
    i.post_id = ANY ($1::bigint[])
`

type GetImagesByPostIdsRow struct {
	ImageUid uuid.UUID `json:"image_uid"`
	PostID   int64     `json:"post_id"`
}

func (q *Queries) GetImagesByPostIds(ctx context.Context, postIds []int64) ([]*GetImagesByPostIdsRow, error) {
	rows, err := q.db.Query(ctx, getImagesByPostIds, postIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetImagesByPostIdsRow
	for rows.Next() {
		var i GetImagesByPostIdsRow
		if err := rows.Scan(&i.ImageUid, &i.PostID); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
